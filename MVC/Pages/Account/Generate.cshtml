@page
@using RazorPages.Models.Implementations
@model Webapp174.Generate
@inject MyHelper _helper;

<div class="container">
    <div class="row">

        <div class="col-12 d-flex flex-column align-items-center">

            <button onclick="Generate()" id="generate-button" class="btn btn-primary btn-lg m-5">
                Сгенерировать
                <small class="text-info">1 Coin</small>
            </button>

            <form class="col-12 d-flex flex-column align-items-center mb-5">

                <label hidden id="edit_id"></label>

                <img class="img-thumbnail mw-50" src="/images/generate-placeholder.png" id="edit_image" />
                <div class="div" style="height: 60px;">
                    <p id="edit_image_text">
                    Нажмите <strong>СГЕНЕРИРОВАТЬ</strong> для получения новой картинки,
                    или выберите картинку из вашего хранилища сгенерированных картинок снизу.</p>

                </div>
                
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Дайте картинке название</label>
                    <input type="text" class="form-control" aria-describedby="emailHelp" id="edit_name">
                </div>

                <div class="mb-3">
                    <label for="edit_desc" class="form-label">Задайте картинке описание</label>
                    <textarea class="form-control" placeholder="(необязательно)" id="edit_desc"></textarea>
                </div>

                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="putOnSale">
                    <label class="form-check-label" for="putOnSale">Выставить на продажу</label>
                </div>

                <div class="fixed-height" style="height: 80px">
                    <div class="mb-3" id="price-box">
                        <label for="edit_price" class="form-label">Цена</label>
                        <input type="number" class="form-control" aria-describedby="Цена в коинах" id="edit_price">
                    </div>
                </div>

                <button class="btn btn-primary btn-lg " type="button" id="save-button" onclick="SaveToGallery()">Сохранить в галерею</button>
            </form>

        </div>

        <div class="container">
			<div class="row" id="in-heap-row">

            </div>
        </div>

    </div>
</div>

@{
    #nullable disable
    string currentUserName = await _helper.GetCurrentUserName();

    string generateActionUrl = "/api/Ajax/GenerateNewImage/";
    string getImagesInHeapActionUrl = $"/api/UserImages/{currentUserName}/InHeap";
    string saveImageToGalleryActionUrl = "/api/Ajax/SaveImageToGallery/";
}

<script type="text/javascript">

    form = $("form");

    edit_id = $("#edit_id");
    edit_image_text = $("#edit_image_text");
    edit_image = $("#edit_image");
    edit_name = $("#edit_name");
    edit_desc = $("#edit_desc");
    edit_price = $("#edit_price");

    putOnSaleCheck = $("#putOnSale");
    priceBox = $("#price-box");

    save_button = $("#save-button");
    generate_button = $("#generate-button");

    const reset_form = () => {
        form.trigger("reset");
        ResetPriceBox();
    };

    priceBox.hide();

    function ResetPriceBox() {
        priceBox.hide();
        save_button.text("Сохранить в галерею")
    }

    putOnSaleCheck.click(function (event) {
        if (putOnSaleCheck.is(":checked")) {
            priceBox.show()
            save_button.text("Сохранить в галерею и выставить на продажу")
        } else {
            ResetPriceBox();
        } 
    });
   
    $(document).ready(async function () {
        UpdateImagesInHeap()
        await UpdateCoinBalance();
        UpdateGenerateButtonActivity();
    });
    

    function inHeapImageCard(src, text, id) {
        return `<div class="card col-3" id="inHeap-${id}">
            <img src = "/${src}" class="card-img-top" alt = "image">
            <div class="card-body">
                <p class="card-text"> <small class="text-muted" id="genAgo-text-${id}">${text}</small></p>
            </div>
        </div>`;
    };

    async function UpdateImagesInHeap() {
        console.log("sending get for images in heap...");

        return $.ajax({
            url: "@getImagesInHeapActionUrl",
            method: "get",
            success: json => {

                var parent = $("#in-heap-row");
                parent.html("");

                for (const item of json.value) {

                    var genAgoText = 
                        (item.timespanSegments.days == 0 ? "" : (item.timespanSegments.days + "d ")) +
                        (item.timespanSegments.hours == 0 ? "" : (item.timespanSegments.hours + "h ")) +
                        (item.timespanSegments.minutes == 0 ? "" : (item.timespanSegments.minutes + "m ")) +
                        (item.timespanSegments.seconds + "s ago.");

                    parent.append(inHeapImageCard(
                        item.webFullName,
                        genAgoText,
                        item.id,
                     ));

                    $("#in-heap-row > div:last-child").click(function (event) {
                        SelectImageInHeap(item.id);
                    });

                };


            },
            error: (result, textStatus) => {
                console.log(textStatus);
            }
        });
    };

    function SelectImageInHeap(id) {
        $(`div[id^="inHeap"]`).removeClass("bg-primary");
        $(`#inHeap-${id}`).addClass("bg-primary");
        edit_id.text(id);

        edit_image_text.text($(`#genAgo-text-${id}`).text())
        
        src = $(`#inHeap-${id} > img`).attr("src");
        edit_image.attr("src", src);

        reset_form();

    };

    async function SaveToGallery() {

        id = edit_id.text();
        name = edit_name.val();
        desc = edit_desc.val();
        putOnSale = putOnSaleCheck.is(":checked");
        price = edit_price.val();
        priceInt = parseInt(price, 10);

        if (id.length === 0) {
            edit_image_text.text("Вы не выбрали картинку");
            return;
        }

        if (name.length === 0) {
            edit_image_text.text("Вы не ввели имя картинки");
            return;
        }

        if (putOnSale && (price.length === 0 || priceInt === 0)) {
            edit_image_text.text("Вы не ввели цену картинки");
            return;
        }

        console.log("sending post to save image...");

        data = JSON.stringify({
            name: name,
            description: desc,
            id: id,
            isOnSale: putOnSale,
            price: priceInt
        });

        console.log(data);

        return $.ajax({
            url: "@saveImageToGalleryActionUrl",
            method: "post",
            data: data,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            processData: false,
            success: async (result) => {
                edit_image_text.text("Изображение сохранено в галерею");
                edit_image.attr("src", "/images/generate-placeholder.png");
                edit_id.text("");
                reset_form();
                await UpdateImagesInHeap();
               
            },
            error: (result, textStatus) => {
                edit_image_text.text(textStatus);
            }
        });

    }

    function UpdateGenerateButtonActivity() {
        console.log("Updating button");
        if (coin_balance === 0) {
            generate_button.prop('disabled', true);
        } else {
            generate_button.prop('disabled', false);
        }
    }

    async function Generate() {

        console.log("sending post to generate image...");

        return $.ajax({
            url: "@generateActionUrl",
            method: "post",
            success: async (result) => {
                edit_id.text(result.id);
                edit_image_text.text("");
                edit_image.attr("src", "/" + result.webFullName);
                reset_form();
                UpdateImagesInHeap();
                await UpdateCoinBalance();
                UpdateGenerateButtonActivity();
            },
            error: (result, textStatus) => {
                edit_image_text.text(textStatus);
            }
        });
    }

</script>